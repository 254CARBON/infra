apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mlflow-server
  namespace: ml-platform
  labels:
    app.kubernetes.io/name: mlflow-server
    app.kubernetes.io/part-of: "254carbon"
spec:
  serviceName: mlflow-server
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mlflow-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mlflow-server
        app.kubernetes.io/part-of: "254carbon"
    spec:
      containers:
      - name: mlflow-server
        image: python:3.11-slim
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        command: ["/bin/bash"]
        args:
        - -c
        - |
          pip install mlflow==2.8.1 psycopg2-binary boto3
          mlflow server \
            --backend-store-uri postgresql://mlflow:mlflow_password@postgres:5432/mlflow \
            --default-artifact-root s3://mlflow-artifacts \
            --host 0.0.0.0 \
            --port 5000
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: MLFLOW_BACKEND_STORE_URI
          value: "postgresql://mlflow:mlflow_password@postgres:5432/mlflow"
        - name: MLFLOW_DEFAULT_ARTIFACT_ROOT
          value: "s3://mlflow-artifacts"
        - name: AWS_ACCESS_KEY_ID
          value: "minioadmin"
        - name: AWS_SECRET_ACCESS_KEY
          value: "minioadmin123"
        - name: MLFLOW_S3_ENDPOINT_URL
          value: "http://minio:9000"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: mlflow-data
          mountPath: /mlflow
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mlflow-data
        persistentVolumeClaim:
          claimName: mlflow-data-mlflow-server-0
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-server
  namespace: ml-platform
  labels:
    app.kubernetes.io/name: mlflow-server
    app.kubernetes.io/part-of: "254carbon"
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: mlflow-server
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mlflow-data-mlflow-server-0
  namespace: ml-platform
  labels:
    app.kubernetes.io/name: mlflow-server
    app.kubernetes.io/part-of: "254carbon"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mlflow-server-ingress
  namespace: ml-platform
  labels:
    app.kubernetes.io/name: mlflow-server
    app.kubernetes.io/part-of: "254carbon"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: mlflow.254carbon.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mlflow-server
            port:
              number: 5000
